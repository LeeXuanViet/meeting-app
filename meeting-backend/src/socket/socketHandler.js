import jwt from "jsonwebtoken"
import User from "../models/User.js"
import Meeting from "../models/Meeting.js"
import dotenv from "dotenv"
import crypto from "crypto"

dotenv.config()

// Danh s√°ch c√°c ph√≤ng h·ªçp ƒëang ho·∫°t ƒë·ªông (roomId ‚Üí Map c√°c ng∆∞·ªùi tham gia)
const activeRooms = new Map()

// B·∫£n ƒë·ªì √°nh x·∫° userId ‚Üí socketId (ƒë·ªÉ g·ª≠i tin nh·∫Øn ri√™ng - private message)
const userSocketMap = new Map()


// ===============================
// üöÄ H√†m kh·ªüi t·∫°o Socket.IO
// ===============================
export const initializeSocket = (io) => {

  // üß© Middleware x√°c th·ª±c m·ªói khi c√≥ client k·∫øt n·ªëi qua socket
  io.use(async (socket, next) => {
    try {
      // L·∫•y token t·ª´ client (g·ª≠i k√®m trong ph·∫ßn auth ho·∫∑c header)
      const token =
        socket.handshake.auth.token ||
        socket.handshake.headers.authorization?.split(" ")[1]

      if (!token) {
        return next(new Error("Token kh√¥ng ƒë∆∞·ª£c cung c·∫•p"))
      }

      // Gi·∫£i m√£ token ƒë·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng
      const decoded = jwt.verify(token, process.env.JWT_SECRET)
      const user = await User.findById(decoded.id)

      // N·∫øu user kh√¥ng t·ªìn t·∫°i ho·∫∑c ch∆∞a ƒë∆∞·ª£c admin duy·ªát ‚Üí t·ª´ ch·ªëi k·∫øt n·ªëi
      if (!user || !user.approved) {
        return next(new Error("Ng∆∞·ªùi d√πng ch∆∞a ƒë∆∞·ª£c ph√™ duy·ªát"))
      }

      // L∆∞u th√¥ng tin user v√†o socket (ƒë·ªÉ d√πng ·ªü c√°c s·ª± ki·ªán sau)
      socket.user = {
        id: user._id.toString(),
        email: user.email,
        fullName: user.fullName,
      }

      next() // Cho ph√©p k·∫øt n·ªëi ti·∫øp t·ª•c
    } catch (error) {
      next(new Error("Token kh√¥ng h·ª£p l·ªá"))
    }
  })


  // ===============================
  // üîå X·ª≠ l√Ω khi ng∆∞·ªùi d√πng k·∫øt n·ªëi th√†nh c√¥ng
  // ===============================
  io.on("connection", (socket) => {
    console.log(`User connected: ${socket.user.fullName} (${socket.id})`)

    // L∆∞u √°nh x·∫° user ‚Üí socket (ƒë·ªÉ h·ªó tr·ª£ g·ª≠i tin nh·∫Øn ri√™ng)
    userSocketMap.set(socket.user.id, socket.id)


    // =====================================
    // üë• S·ª± ki·ªán: Ng∆∞·ªùi d√πng tham gia ph√≤ng h·ªçp
    // =====================================
    socket.on("join-meeting", async (data) => {
      try {
        const { roomId, meetingId } = data

        // Ki·ªÉm tra tham s·ªë ƒë·∫ßu v√†o
        if (!roomId && !meetingId) {
          socket.emit("error", { message: "Room ID ho·∫∑c Meeting ID l√† b·∫Øt bu·ªôc" })
          return
        }

        // T√¨m th√¥ng tin cu·ªôc h·ªçp trong MongoDB
        let meeting
        if (meetingId) {
          meeting = await Meeting.findById(meetingId)
        } else if (roomId) {
          meeting = await Meeting.findOne({ roomId })
        }

        if (!meeting) {
          socket.emit("error", { message: "Ph√≤ng h·ªçp kh√¥ng t·ªìn t·∫°i" })
          return
        }

        // ‚úÖ Th√™m ng∆∞·ªùi d√πng v√†o danh s√°ch participants trong DB n·∫øu ch∆∞a c√≥
        if (!meeting.participants.includes(socket.user.id)) {
          meeting.participants.push(socket.user.id)
          await meeting.save()
        }

        // ‚úÖ Socket tham gia v√†o ph√≤ng t∆∞∆°ng ·ª©ng (theo roomId)
        socket.join(meeting.roomId)

        // ‚úÖ N·∫øu ph√≤ng ch∆∞a c√≥ trong RAM, kh·ªüi t·∫°o m·ªõi
        if (!activeRooms.has(meeting.roomId)) {
          activeRooms.set(meeting.roomId, new Map())
        }

        // L·∫•y danh s√°ch th√†nh vi√™n ƒëang online trong ph√≤ng ƒë√≥
        const roomParticipants = activeRooms.get(meeting.roomId)

        // Lo·∫°i b·ªè c√°c entry c≈© c·ªßa c√πng user (tr∆∞·ªùng h·ª£p refresh/reconnect)
        for (const [sId, p] of roomParticipants.entries()) {
          if (p.userId === socket.user.id) {
            roomParticipants.delete(sId)
          }
        }

        // Th√™m ng∆∞·ªùi m·ªõi v√†o danh s√°ch ng∆∞·ªùi ƒëang ho·∫°t ƒë·ªông
        roomParticipants.set(socket.id, {
          userId: socket.user.id,
          userName: socket.user.fullName,
          socketId: socket.id,
          joinedAt: new Date(),
        })

        // üîÑ N·∫øu cu·ªôc h·ªçp ƒëang ·ªü tr·∫°ng th√°i ‚Äúƒë√£ l√™n l·ªãch‚Äù ‚Üí chuy·ªÉn sang ‚Äúƒëang di·ªÖn ra‚Äù
        if (meeting.status === "scheduled") {
          meeting.status = "ongoing"
          await meeting.save()
        }

        // ‚úÖ G·ª≠i ph·∫£n h·ªìi cho ch√≠nh ng∆∞·ªùi d√πng l√† h·ªç ƒë√£ tham gia th√†nh c√¥ng
        socket.emit("joined-meeting", {
          meetingId: meeting._id.toString(),
          roomId: meeting.roomId,
          title: meeting.title,
          description: meeting.description,
        })

        // üîî G·ª≠i th√¥ng b√°o ƒë·∫øn nh·ªØng ng∆∞·ªùi kh√°c trong ph√≤ng r·∫±ng c√≥ ng∆∞·ªùi m·ªõi v√†o
        // Dedupe theo userId ƒë·ªÉ kh√¥ng hi·ªÉn th·ªã tr√πng
        const seen = new Set()
        const participantsList = []
        for (const p of roomParticipants.values()) {
          if (!seen.has(p.userId)) {
            seen.add(p.userId)
            participantsList.push(p)
          }
        }
        socket.to(meeting.roomId).emit("user-joined", {
          user: {
            id: socket.user.id,
            name: socket.user.fullName,
          },
          participants: participantsList,
        })

        // üë• G·ª≠i danh s√°ch ng∆∞·ªùi ƒëang trong ph√≤ng cho ng∆∞·ªùi v·ª´a m·ªõi v√†o
        socket.emit("current-participants", { participants: participantsList })

        console.log(`${socket.user.fullName} joined room ${meeting.roomId}`)
      } catch (error) {
        console.error("Error joining meeting:", error)
        socket.emit("error", { message: "L·ªói khi tham gia cu·ªôc h·ªçp" })
      }
    })


    // =====================================
    // üö™ S·ª± ki·ªán: R·ªùi kh·ªèi ph√≤ng h·ªçp
    // =====================================
    socket.on("leave-meeting", async (data) => {
      try {
        const { roomId } = data

        if (roomId && activeRooms.has(roomId)) {
          const roomParticipants = activeRooms.get(roomId)
          roomParticipants.delete(socket.id) // X√≥a ng∆∞·ªùi n√†y kh·ªèi danh s√°ch

          // N·∫øu ph√≤ng tr·ªëng ‚Üí x√≥a kh·ªèi danh s√°ch activeRooms
          if (roomParticipants.size === 0) {
            activeRooms.delete(roomId)
          } else {
            // G·ª≠i th√¥ng b√°o cho nh·ªØng ng∆∞·ªùi c√≤n l·∫°i (lo·∫°i tr√πng theo userId)
            const seen = new Set()
            const uniqueList = []
            for (const p of roomParticipants.values()) {
              if (!seen.has(p.userId)) {
                seen.add(p.userId)
                uniqueList.push(p)
              }
            }
            socket.to(roomId).emit("user-left", {
              user: {
                id: socket.user.id,
                name: socket.user.fullName,
              },
              participants: uniqueList,
            })
          }

          // Socket r·ªùi kh·ªèi ph√≤ng
          socket.leave(roomId)
          console.log(`${socket.user.fullName} left room ${roomId}`)
        }
      } catch (error) {
        console.error("Error leaving meeting:", error)
      }
    })


    // =====================================
    // üí¨ S·ª± ki·ªán: G·ª≠i tin nh·∫Øn (c√¥ng khai ho·∫∑c ri√™ng t∆∞)
    // =====================================
    socket.on("chat-message", (data) => {
      const { roomId, message, targetUserId, messageType = "public" } = data

      if (!roomId || !message) return

      const messageData = {
        id: crypto.randomBytes(8).toString("hex"),
        userId: socket.user.id,
        userName: socket.user.fullName,
        message,
        timestamp: new Date(),
        type: messageType,
        targetUserId: targetUserId || null,
      }

      // üîí Tin nh·∫Øn ri√™ng t∆∞ (1-1)
      if (messageType === "private" && targetUserId) {
        const targetSocketId = userSocketMap.get(targetUserId)

        if (targetSocketId) {
          // G·ª≠i tin nh·∫Øn cho ng∆∞·ªùi nh·∫≠n
          io.to(targetSocketId).emit("chat-message", messageData)
          // G·ª≠i l·∫°i cho ng∆∞·ªùi g·ª≠i ƒë·ªÉ hi·ªÉn th·ªã trong UI
          socket.emit("chat-message", messageData)
        } else {
          socket.emit("error", { message: "Ng∆∞·ªùi d√πng kh√¥ng tr·ª±c tuy·∫øn" })
        }
      } else {
        // üåê Tin nh·∫Øn c√¥ng khai - g·ª≠i ƒë·∫øn t·∫•t c·∫£ trong ph√≤ng
        io.to(roomId).emit("chat-message", messageData)
      }
    })


    // =====================================
    // ‚úçÔ∏è S·ª± ki·ªán: Ng∆∞·ªùi d√πng ƒëang nh·∫≠p (typing)
    // =====================================
    socket.on("typing", (data) => {
      const { roomId, isTyping } = data
      if (roomId) {
        // G·ª≠i th√¥ng b√°o cho c√°c th√†nh vi√™n kh√°c trong ph√≤ng
        socket.to(roomId).emit("typing", {
          userId: socket.user.id,
          userName: socket.user.fullName,
          isTyping,
        })
      }
    })


    // =====================================
    // ‚ùå S·ª± ki·ªán: Ng·∫Øt k·∫øt n·ªëi (ƒë√≥ng tab, m·∫•t m·∫°ng, v.v.)
    // =====================================
    socket.on("disconnect", async () => {
      console.log(`User disconnected: ${socket.user.fullName} (${socket.id})`)

      // X√≥a √°nh x·∫° user ‚Üí socket
      userSocketMap.delete(socket.user.id)

      // X√≥a user kh·ªèi t·∫•t c·∫£ ph√≤ng ƒëang ho·∫°t ƒë·ªông
      for (const [roomId, participants] of activeRooms.entries()) {
        if (participants.has(socket.id)) {
          participants.delete(socket.id)

          if (participants.size === 0) {
            activeRooms.delete(roomId)
          } else {
            // Th√¥ng b√°o cho ng∆∞·ªùi kh√°c trong ph√≤ng (lo·∫°i tr√πng theo userId)
            const seen = new Set()
            const uniqueList = []
            for (const p of participants.values()) {
              if (!seen.has(p.userId)) {
                seen.add(p.userId)
                uniqueList.push(p)
              }
            }
            socket.to(roomId).emit("user-left", {
              user: {
                id: socket.user.id,
                name: socket.user.fullName,
              },
              participants: uniqueList,
            })
          }
        }
      }
    })


    // =====================================
    // ‚ö†Ô∏è X·ª≠ l√Ω l·ªói socket
    // =====================================
    socket.on("error", (error) => {
      console.error("Socket error:", error)
    })

    // =====================================
    // üìπ WebRTC Video Call Events
    // =====================================

    // User mu·ªën b·∫≠t/t·∫Øt video/mic/screen share
    socket.on("media-toggle", (data) => {
      const { roomId, mediaType, enabled } = data
      if (roomId) {
        // Broadcast state change ƒë·∫øn t·∫•t c·∫£ ng∆∞·ªùi trong ph√≤ng
        socket.to(roomId).emit("media-toggle", {
          userId: socket.user.id,
          userName: socket.user.fullName,
          mediaType, // "video" | "audio" | "screen"
          enabled,
        })
      }
    })

    // WebRTC Offer (caller g·ª≠i offer cho callee)
    socket.on("webrtc-offer", (data) => {
      const { roomId, targetUserId, offer } = data
      const targetSocketId = userSocketMap.get(targetUserId)
      if (targetSocketId) {
        io.to(targetSocketId).emit("webrtc-offer", {
          fromUserId: socket.user.id,
          fromUserName: socket.user.fullName,
          offer,
        })
      }
    })

    // WebRTC Answer (callee tr·∫£ l·ªùi offer)
    socket.on("webrtc-answer", (data) => {
      const { roomId, targetUserId, answer } = data
      const targetSocketId = userSocketMap.get(targetUserId)
      if (targetSocketId) {
        io.to(targetSocketId).emit("webrtc-answer", {
          fromUserId: socket.user.id,
          fromUserName: socket.user.fullName,
          answer,
        })
      }
    })

    // ICE Candidate (th√¥ng tin k·∫øt n·ªëi m·∫°ng)
    socket.on("webrtc-ice-candidate", (data) => {
      const { roomId, targetUserId, candidate } = data
      const targetSocketId = userSocketMap.get(targetUserId)
      if (targetSocketId) {
        io.to(targetSocketId).emit("webrtc-ice-candidate", {
          fromUserId: socket.user.id,
          candidate,
        })
      }
    })

    // User k·∫øt th√∫c call
    socket.on("webrtc-end-call", (data) => {
      const { roomId } = data
      if (roomId) {
        socket.to(roomId).emit("webrtc-end-call", {
          userId: socket.user.id,
          userName: socket.user.fullName,
        })
      }
    })

    // User y√™u c·∫ßu call l·∫°i (tr∆∞·ªùng h·ª£p reconnect)
    socket.on("webrtc-reconnect-request", (data) => {
      const { roomId } = data
      if (roomId && activeRooms.has(roomId)) {
        const roomParticipants = activeRooms.get(roomId)
        const seen = new Set()
        const participants = []
        for (const p of roomParticipants.values()) {
          if (!seen.has(p.userId)) {
            seen.add(p.userId)
            participants.push(p)
          }
        }
        // G·ª≠i danh s√°ch participants cho user ƒëang reconnect
        socket.emit("webrtc-participants-list", { participants })
      }
    })
  })

  return io
}

// Xu·∫•t ra ƒë·ªÉ c√°c module kh√°c c√≥ th·ªÉ truy c·∫≠p danh s√°ch ph√≤ng ho·∫∑c ng∆∞·ªùi d√πng
export { activeRooms, userSocketMap }
